                       *********  ReactJS  **********
-> React creates a VIRTUAL DOM in memory, instead of making the changes in browser's DOM
-> createRoot () : it comapres between the DOM of browser with the DOM created by itself and then comapres both of them and then only make changes in the things that got affected by UI updation, while browsers completely refreshes its DOM

-> In reactJS, we can write our custom tags. {manifest.json - is for mobile apps}
-> If we make our react app using react app then there is a Reactscript given which helps in usiong the JS without really using it, while in vite-react comnbination, we directly load that in HTML page.
-> SPA : A single-page application is defined as an application (web app or website) that loads only a single page and then rewrites the page with new content fetched from a web server as the user interacts with it instead of loading a new page for every interaction

                        ********  JSX  *********
-> JSX stands for JavaScript XML.
-> JSX allows us to write HTML in React.
-> JSX makes it easier to write and add HTML in React.
-> JSX converts HTML tags into react elements.

-> JSX type files means the files that are returning the HTML  
-> In JSX it is mandatory always that we only return one element, To solve the problem of returning many elements, we can wrap it into a div, which also can be done as simple <> </>, where <> (empty tag) is known as fragments 
-> Components : Functions that we are exporting and importing 
-> Every React uses bundler that works behind the scene to make the things more effective 
-> {variable name} : If we write something inside this curly braces it will be treated as variable, can't write any if else or loops only we can write here is evaluated expression 
-> React.createElement : used to inject the elements
-> Basically the idea of react is, it controls UI updation 

React Fibre : https://github.com/acdlite/react-fiber-architecture  {Best Resource to get read}  
                                      
                                      ***SUMMARY of it is written down  ***

-> features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives.
-> Reconciliation : The algorithm React uses to diff one tree with another to determine which parts need to be changed.
-> Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory
-> The key points are:
    In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.
    Different types of updates have different priorities â€” an animation update needs to complete more quickly than, say, an update from a data store.
    A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you.
-> If we see any error generally in Tailwind on copying it from website just try to close the tags 

                            *****  Props  *****

-> Props are arguments passed into React components.
-> Props are passed to components via HTML attributes.
-> props stands for properties. 
-> When creating a React component, the component's name MUST start with an upper case letter.
-> Props : Basically props makes the Components reusable. 
-> we can pass even objects too in json format but the ideal way of doing it is declaring the variable somewhere else and then passing it
-> We can pass values from one components to another and can access it by passing the argument in the function of card {Like : we passed username and accessed it through props}
-> Always try to handle the props also by adding it as parameter just not adding it in App.jsx
-> Always pass the default value of any variable so that if it do not get passed then the web page will show that value like we have passed of btnText = "visit me"


-> So if we write (counter+1) 4 times in counter program and check what will be the output, then output will be still be the same until we make the program as callback function to get the value
