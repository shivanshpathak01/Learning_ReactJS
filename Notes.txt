                       *********  ReactJS  **********
-> We Always try to optimise our code using React, we always try to see if there is any node remaining which is not in use, if yes we try to optimise it 

-> React creates a VIRTUAL DOM in memory, instead of making the changes in browser's DOM
-> createRoot () : it comapres between the DOM of browser with the DOM created by itself and then comapres both of them and then only make changes in the things that got affected by UI updation, while browsers completely refreshes its DOM

-> In reactJS, we can write our custom tags. {manifest.json - is for mobile apps}
-> If we make our react app using react app then there is a Reactscript given which helps in usiong the JS without really using it, while in vite-react comnbination, we directly load that in HTML page.
-> SPA : A single-page application is defined as an application (web app or website) that loads only a single page and then rewrites the page with new content fetched from a web server as the user interacts with it instead of loading a new page for every interaction

                        ********  JSX  *********
                        rules to Writing markup in JSX : 

-> 1. Return a single root, 2. Close all tags, 3. camelCase most of the things 

-> If we write JS in curly braces{}, it will be treated as JS without doing anything else
-> JSX stands for JavaScript XML.
-> JSX allows us to write HTML in React.
-> JSX makes it easier to write and add HTML in React.
-> JSX converts HTML tags into react elements.
-> Babel is a tool which is used to converts the JSX to pure JS

-> JSX type files means the files that are returning the HTML  
-> In JSX it is mandatory always that we only return one element, To solve the problem of returning many elements, we can wrap it into a div, which also can be done as simple <> </>, where <> (empty tag) is known as fragments 
-> Components : Functions that we are exporting and importing 
-> Every React uses bundler that works behind the scene to make the things more effective 
-> {variable name} : If we write something inside this curly braces it will be treated as variable, can't write any if else or loops only we can write here is evaluated expression 
-> React.createElement : used to inject the elements
-> Basically the idea of react is, it controls UI updation 

React Fibre : https://github.com/acdlite/react-fiber-architecture  {Best Resource to get read}  
                                      
                                      ***SUMMARY of it is written down  ***

-> features include the ability to pause, abort, or reuse work as new updates come in; the ability to assign priority to different types of updates; and new concurrency primitives.
-> Reconciliation : The algorithm React uses to diff one tree with another to determine which parts need to be changed.
-> Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory
-> The key points are:
    In a UI, it's not necessary for every update to be applied immediately; in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.
    Different types of updates have different priorities â€” an animation update needs to complete more quickly than, say, an update from a data store.
    A push-based approach requires the app (you, the programmer) to decide how to schedule work. A pull-based approach allows the framework (React) to be smart and make those decisions for you.
-> If we see any error generally in Tailwind on copying it from website just try to close the tags 


                        *****  React Components *****

-> A component is basically a reusable piece of code like functions 
-> We return HTML in Components, and it is mandatory to return only a single root {We can do this by using a div}
-> To render a Component we write them as <ComponentName />
-> To export multiple Components we use export{component1,component,...}
-> This import export is possible due to webpack which is already inbuilt in React
-> We use React Fragments to group a list of childrens without adding extra nodes to the DOM

                            *****  Props  *****

-> Props are the Objects, so we pass on them by destructuring them so that we do not need to do props.title,props.something ans so on {instead of that we directly write title, something and so on in curly braces}
-> passing string is Direct, while passing numbers is not direct, we need to wrap up the numbers in curly braces
-> If we want to print Arrays directly, it will print one by one without any comma or separation, same goes for objects too
-> Conditionals are used in the React very often and basically ternary operator is majorly used 
-> If any node is not in use and we see that it is just taking up the space, we try to write there null which will make its value null
1. {price>=30000 ? <p> Discount : 5% </p> : null}
2. {price>=30000 && <p> Discount : 5% </p>}
*****  Rendering the Arrays  *****

-> We can pass the Arrays in the form of li means list-items, then they will pass like index values of the Arrays
-> Second method is we can map the values by features.map((x)=><li>{x}</li>) and will wrap them up in return statement  

******  Dynamic Component Styling  ********
-> We can directly css for the components and they are decided at the runtime so they are called Dynamic, by writing CSS in curly braces
{let style = {backgroundColor : price>30000 ? "yellow" : ""}}




-> Props : Basically props makes the Components reusable. 
-> we can pass even objects too in json format but the ideal way of doing it is declaring the variable somewhere else and then passing it
-> We can pass values from one components to another and can access it by passing the argument in the function of card {Like : we passed username and accessed it through props}
-> Always try to handle the props also by adding it as parameter just not adding it in App.jsx
-> Always pass the default value of any variable so that if it do not get passed then the web page will show that value like we have passed of btnText = "visit me"


-> So if we write (counter+1) 4 times in counter program and check what will be the output, then output will be still be the same until we make the program as callback function to get the value

-> You can't directly pass parameters inside the function, instead, you need to pass it as a reference or use arrow function syntax
-> Actually the initial state has color olive and the reload technically resets the state. So, it gets the olive color.
-> In React we write the variables in curly braces, but if they are already in braces then just write the variables directly without sing the curly braces
-> Hooks : Hooks are very useful bcz they are used to write the code without writing the class 
-> useState : used to update and get the current status of the variables
-> useEffect : The useEffect Hook allows you to perform side effects in your components.
    Some examples of side effects are: fetching data, directly updating the DOM, and timers.
    useEffect accepts two arguments. The second argument is optional.
    useEffect(<function>, <dependency>) 
-> useCallback : The React useCallback Hook returns a memoized callback function.
   Think of memoization as caching a value so that it does not need to be recalculated.
-> useRef : The useRef Hook allows you to persist values between renders.
    It can be used to store a mutable value that does not cause a re-render when updated.
    It can be used to access a DOM element directly.
    Basically used where we want to take reference

-> Important : we use Window in React as here, the window object is given while in Next.js there is no window object and server side rendering happens there   
-> window.navigator.clipboard.writeText() : used to copy to clipboard in reactJS
